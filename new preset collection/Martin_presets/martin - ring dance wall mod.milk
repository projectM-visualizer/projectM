MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.005
fWaveScale=0.118
fWaveSmoothing=0.900
fWaveParam=-0.480
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.600
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.400
ob_g=0.200
ob_b=0.200
ob_a=0.100
ib_size=0.040
ib_r=0.620
ib_g=0.550
ib_b=0.330
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=2.500
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=0.300
b3x=0.500
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=480
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.07408
wavecode_0_smoothing=0.00000
wavecode_0_r=0.000
wavecode_0_g=0.500
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_frame1=t1 = 0;
wave_0_per_frame2=t2 = 0;
wave_0_per_frame3=t3 = 0;
wave_0_per_point1=base = 3000;
wave_0_per_point2=ring = int (t1/16);
wave_0_per_point3=rb = base + ring*12;
wave_0_per_point4=lpush = gmegabuf(rb+8);
wave_0_per_point5=gpush = gmegabuf(10000+ring*12);
wave_0_per_point6=
wave_0_per_point7=arg = (t1%16)/12*6.28;
wave_0_per_point8=a =  (t1%16 < 14) * (t1%16 > 1);
wave_0_per_point9=
wave_0_per_point10=rx1 = gmegabuf (rb+4);
wave_0_per_point11=ry1 = gmegabuf (rb+5);
wave_0_per_point12=x0 =  rx1 + 0.5;
wave_0_per_point13=y0 =  ry1 + 0.5;
wave_0_per_point14=
wave_0_per_point15=rad = gmegabuf (rb)*1.5 * (1+lpush);
wave_0_per_point16=rang = gmegabuf (rb+7) ;
wave_0_per_point17=
wave_0_per_point18=x =  x0 + rad*cos (arg) * cos (rang);
wave_0_per_point19=y =  y0 + rad*sin (arg) ;
wave_0_per_point20=
wave_0_per_point21=arg = (t1%16)/16*6.28;
wave_0_per_point22=r = .5 + q1*sin (arg + gmegabuf(rb+9));
wave_0_per_point23=g = .5 + q1*sin (arg + gmegabuf(rb+10)); 
wave_0_per_point24=b = .5 + q1*sin (arg + gmegabuf(rb+11)); 
wave_0_per_point25=a *= 0.5 + q2*sin(q3*arg);
wave_0_per_point26=
wave_0_per_point27=t1 += 1;
wavecode_1_enabled=1
wavecode_1_samples=480
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wave_1_per_point1=base = 2000;
wave_1_per_point2=ring = int (t1/16);
wave_1_per_point3=rb = base + ring*12;
wave_1_per_point4=lpush = gmegabuf(rb+8);
wave_1_per_point5=gpush = gmegabuf(10000+ring*12);
wave_1_per_point6=
wave_1_per_point7=arg = (t1%16)/12*6.28;
wave_1_per_point8=a =  (t1%16 < 14) * (t1%16 > 1);
wave_1_per_point9=
wave_1_per_point10=rx1 = gmegabuf (rb+4);
wave_1_per_point11=ry1 = gmegabuf (rb+5);
wave_1_per_point12=x0 =  rx1 + 0.5;
wave_1_per_point13=y0 =  ry1 + 0.5;
wave_1_per_point14=
wave_1_per_point15=rad = gmegabuf (rb)*1.5 * (1+lpush);
wave_1_per_point16=rang = gmegabuf (rb+7) ;
wave_1_per_point17=
wave_1_per_point18=x =  x0 + rad*cos (arg) * cos (rang);
wave_1_per_point19=y =  y0 + rad*sin (arg) ;
wave_1_per_point20=
wave_1_per_point21=arg = (t1%16)/16*6.28;
wave_1_per_point22=r = .5 + q1*sin (arg + gmegabuf(rb+9));
wave_1_per_point23=g = .5 + q1*sin (arg + gmegabuf(rb+10)); 
wave_1_per_point24=b = .5 + q1*sin (arg + gmegabuf(rb+11)); 
wave_1_per_point25=a *= 0.5 + q2*sin(q3*arg);
wave_1_per_point26=t1 += 1;
wavecode_2_enabled=1
wavecode_2_samples=480
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=2.94235
wavecode_2_smoothing=0.50000
wavecode_2_r=0.700
wavecode_2_g=0.600
wavecode_2_b=0.400
wavecode_2_a=1.000
wave_2_per_frame1=t1 = 0;
wave_2_per_point1=base = 1000;
wave_2_per_point2=ring = int (t1/16);
wave_2_per_point3=rb = base + ring*12;
wave_2_per_point4=lpush = gmegabuf(rb+8);
wave_2_per_point5=gpush = gmegabuf(10000+ring*12);
wave_2_per_point6=
wave_2_per_point7=arg = (t1%16)/12*6.28;
wave_2_per_point8=a =  (t1%16 < 14) * (t1%16 > 1);
wave_2_per_point9=
wave_2_per_point10=rx1 = gmegabuf (rb+4);
wave_2_per_point11=ry1 = gmegabuf (rb+5);
wave_2_per_point12=x0 =  rx1 + 0.5;
wave_2_per_point13=y0 =  ry1 + 0.5;
wave_2_per_point14=
wave_2_per_point15=rad = gmegabuf (rb)*1.5 * (1+lpush);
wave_2_per_point16=rang = gmegabuf (rb+7) ;
wave_2_per_point17=
wave_2_per_point18=x =  x0 + rad*cos (arg) * cos (rang);
wave_2_per_point19=y =  y0 + rad*sin (arg) ;
wave_2_per_point20=
wave_2_per_point21=arg = (t1%16)/16*6.28;
wave_2_per_point22=r = .5 + q1*sin (arg + gmegabuf(rb+9));
wave_2_per_point23=g = .5 + q1*sin (arg + gmegabuf(rb+10)); 
wave_2_per_point24=b = .5 + q1*sin (arg + gmegabuf(rb+11)); 
wave_2_per_point25=a *= 0.5 + q2*sin(q3*arg);
wave_2_per_point26=t1 += 1;
wavecode_3_enabled=0
wavecode_3_samples=480
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=0.000
wavecode_3_a=1.000
wave_3_per_frame1=t1 = 0;
wave_3_per_point1=base = 0;
wave_3_per_point2=ring = int (t1/16);
wave_3_per_point3=rb = base + ring*12;
wave_3_per_point4=lpush = gmegabuf(rb+8);
wave_3_per_point5=gpush = gmegabuf(10000+ring*12);
wave_3_per_point6=
wave_3_per_point7=arg = (t1%16)/12*6.28;
wave_3_per_point8=a =  (t1%16 < 14) * (t1%16 > 1);
wave_3_per_point9=
wave_3_per_point10=rx1 = gmegabuf (rb+4);
wave_3_per_point11=ry1 = gmegabuf (rb+5);
wave_3_per_point12=x0 =  rx1 + 0.5;
wave_3_per_point13=y0 =  ry1 + 0.5;
wave_3_per_point14=
wave_3_per_point15=rad = gmegabuf (rb)*1.5 * (1+lpush);
wave_3_per_point16=rang = gmegabuf (rb+7) ;
wave_3_per_point17=
wave_3_per_point18=x =  x0 + rad*cos (arg) * cos (rang);
wave_3_per_point19=y =  y0 + rad*sin (arg) ;
wave_3_per_point20=
wave_3_per_point21=arg = (t1%16)/16*6.28;
wave_3_per_point22=r = .5 + q1*sin (arg + gmegabuf(rb+9));
wave_3_per_point23=g = .5 + q1*sin (arg + gmegabuf(rb+10)); 
wave_3_per_point24=b = .5 + q1*sin (arg + gmegabuf(rb+11)); 
wave_3_per_point25=a *= 0.5 + q2*sin(q3*arg);
wave_3_per_point26=t1 += 1;
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=1
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.400
shapecode_0_y=0.500
shapecode_0_rad=0.32461
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.51249
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=0.100
shapecode_0_g2=0.000
shapecode_0_b2=0.300
shapecode_0_a2=0.400
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=100
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.02007
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.93550
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.400
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=23
shapecode_2_additive=0
shapecode_2_thickOutline=1
shapecode_2_textured=0
shapecode_2_num_inst=20
shapecode_2_x=0.650
shapecode_2_y=0.380
shapecode_2_rad=0.01645
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.73678
shapecode_2_r=0.600
shapecode_2_g=0.400
shapecode_2_b=1.000
shapecode_2_a=0.200
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.400
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=10
shapecode_3_additive=0
shapecode_3_thickOutline=1
shapecode_3_textured=0
shapecode_3_num_inst=400
shapecode_3_x=0.800
shapecode_3_y=0.750
shapecode_3_rad=0.07316
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.04372
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=1.000
shapecode_3_a2=1.000
shapecode_3_border_r=1.000
shapecode_3_border_g=0.800
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=n = 0; loop (30000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );
per_frame_init_2=
per_frame_init_3=MINBPM = 30; MAXBPM = 160; num_res = 30; 
per_frame_init_4=index = 0;
per_frame_init_5=loop (num_res,
per_frame_init_6=  n = index*12;
per_frame_init_7=  BPM      = minbpm * pow(maxbpm/minbpm,index/(num_res-1));
per_frame_init_8=  megabuf(n) = BPM;
per_frame_init_9=  index += 1;
per_frame_init_10=);
per_frame_init_11=
per_frame_init_12=pi = 3.1416;
per_frame_init_13=start = rand(5)-5;
per_frame_init_14=ran1  = rand (4) -2;
per_frame_1=dt = min (1/fps,0.1) ; //Stability !
per_frame_2=dec_f = 0.8; dec_m = 1 - 4*dt; dec_s = 1 - 1.25*dt;
per_frame_3=start = start * dec_m + (1-dec_m);
per_frame_4=vol =  bass+mid+treb; avg = avg*dec_s + vol*(1-dec_s);
per_frame_5=excite = atan ((vol-avg))*1.4;
per_frame_6=
per_frame_7=is_beat = above(vol, 1.5*avg + 8*peak) * above (time, tc0+.25);
per_frame_8=tc0 = if (is_beat, time,tc0);
per_frame_9=trig = is_beat * (beatct%8==0); beatct += is_beat;
per_frame_10=peak = if (is_beat,1,peak*dec_m);
per_frame_11=bindex += is_beat;
per_frame_12=trig = is_beat * (bindex%16==0);
per_frame_13=vc = vc*dec_f + (1-dec_f) * excite*0.06;
per_frame_14=
per_frame_15=pu = dec_f*pu + trig*vol/3; pu_ = dec_f*pu_+(1-dec_f)*pu; push=pu_+vc*0;
per_frame_16=bindex2 += trig;
per_frame_17=
per_frame_18=if (trig, ran1 = sin(rand (100))*2+0.5, 0);
per_frame_19=prog += min(int (bindex/30)-prog,0.1)*dt*20;
per_frame_20=prog_ = prog_*dec_m + (1-dec_m) * sin (pi/2*prog) ;
per_frame_21=prog2 +=min(0.2, max (-0.2,bindex-prog2))*dt*16;
per_frame_22=
per_frame_23=index=0; maxquad = 0.2;
per_frame_24=loop (num_res, n = index*12;  omega=megabuf(n) * 6.2832/60;
per_frame_25=  megabuf (n+1) *= 1-0.29*dt; 
per_frame_26=  EC_Steps = int (12*omega*dt)+1; //10=ok, aber hier nur wenige res
per_frame_27=  loop (EC_Steps, // Euler-Cauchy 
per_frame_28=    megabuf (n+1) += (excite - sqr(omega)*megabuf(n+2)) * dt/EC_Steps;
per_frame_29=    megabuf (n+2) += megabuf(n+1) * dt/EC_Steps);
per_frame_30=  beatcos  = megabuf(n+1);  beatsin = megabuf(n+2)*omega;
per_frame_31=  quad     = sqrt (pow(beatsin,2) + pow(beatcos,2)) ;
per_frame_32=  if (maxquad < quad,  maxquad = quad, 0);
per_frame_33=  megabuf (n+3) = megabuf(n+3) *dec_m +  quad* (1-dec_m);
per_frame_34=//  megabuf (n+4) = beatcos * pow(1-index/num_res,1);
per_frame_35=  megabuf (n+4) = megabuf (n+4)*dec_s + beatsin * omega*dt* pow(1-index/num_res,1);
per_frame_36=  megabuf (n+5) = beatsin * pow(1-index/num_res,1);;
per_frame_37=  megabuf (n+8) = gmegabuf (10000+n) ; //size pusher
per_frame_38=  index += 1;
per_frame_39=);
per_frame_40=
per_frame_41=index = 0; maxind = 0;
per_frame_42=loop (num_res,
per_frame_43=  n = 12*index;
per_frame_44=  if (gmegabuf(n+3) > gmegabuf(maxind+3) ,  maxind = n, 0);
per_frame_45=index+=1);
per_frame_46=BPM      = minbpm * pow(maxbpm/minbpm,maxind/12/(num_res-1));
per_frame_47=ctime += BPM/60*dt*pi;
per_frame_48=
per_frame_49=//Buffer !
per_frame_50=size = num_res*12;
per_frame_51=delay = min (12, max (3, int (6*40*dt))); delay = 5; wave = 0;
per_frame_52=n = 4*delay; loop (4*delay, memcpy (n*size, (n-1)*size, size); n -= 1);
per_frame_53=
per_frame_54=//Pusher Queue
per_frame_55=n = num_res;
per_frame_56=loop (num_res, 
per_frame_57=  gmegabuf (10000+n*12) = gmegabuf(10000+(n-1)*12); //size
per_frame_58=  gmegabuf (10001+n*12) = gmegabuf(10001+(n-1)*12); //col
per_frame_59=  gmegabuf (10002+n*12) = gmegabuf(10002+(n-1)*12); //smod ?
per_frame_60=n-=1;);
per_frame_61=gmegabuf (10000) = push; //size
per_frame_62=gmegabuf (10001) = bindex2*1.8; //col
per_frame_63=//gmegabuf (10002) = min(2,max(-1,8*cos(ctime/16)));
per_frame_64=sm = sm*dec_m + (1-dec_m) * ran1;
per_frame_65=gmegabuf (10002) = sm;
per_frame_66=test = gmegabuf(10002);
per_frame_67=
per_frame_68=n = 0; imax = 0;
per_frame_69=loop (num_res,
per_frame_70=  t1 += abs(megabuf(n*12+4))*dt/12 * (prog_ + (1-abs(prog_))* min(1,max(-1,2*sin(t1))));
per_frame_71=  t2 += abs(megabuf(n*12+5))*dt/6 * (prog_ + (1-abs(prog_))* min(1,max(-1,2*sin(t2))));
per_frame_72=n+=1;);
per_frame_73=
per_frame_74=loop (4,
per_frame_75=  n = wave * 1000; m = wave * size*delay; k = m + (num_res-1)*12; ring = 0;
per_frame_76=  loop (num_res,
per_frame_77=  scale =  (megabuf(n+3) +megabuf(k+3))/4; 
per_frame_78=  scale = 1;
per_frame_79=  gmegabuf(n) = (12-wave) * 0.0019; //Rad
per_frame_80=  gmegabuf(n+3) = megabuf(m+3) ;
per_frame_81=  smod =  (10+wave* gmegabuf(10002+ring*12))/12 *start ;
per_frame_82=  gmegabuf(n+4) = sin((ring+0.5)/num_res*6.28+t1)/3 * smod;
per_frame_83=  gmegabuf(n+5) = cos((ring+0.5)/num_res*6.28+t1)/6 * smod;
per_frame_84=  gmegabuf(n+4) += atan((megabuf(m+4) - megabuf (k+4))* scale) *0.1;
per_frame_85=  gmegabuf(n+5) += atan((megabuf(m+5) + megabuf (k+5))* scale) *0.2;
per_frame_86=  gmegabuf(n+7) += megabuf (m+5)*dt*20;
per_frame_87=  gmegabuf(n+8)  = megabuf(m+8);
per_frame_88=  //Colours
per_frame_89=  gmegabuf (n+9)  = 2*pi*ring/num_res + gmegabuf (10001+ring*12);
per_frame_90=  gmegabuf (n+10) = 2*pi*ring/num_res+2+ gmegabuf (10001+ring*12) ; 
per_frame_91=  gmegabuf (n+11) = 2*pi*ring/num_res+4+ gmegabuf (10001+ring*12) ;
per_frame_92=  n+=12; m+=12; k -= 12; ring +=1);
per_frame_93=wave +=1);
per_frame_94=
per_frame_95=q1 = 0.34; //mod. col
per_frame_96=q2 = 0.35; //mod a - shift
per_frame_97=q3 = 1.2; //mod a - scale
per_frame_98=
per_frame_99=//flash2 pos
per_frame_100=fsig = max (0,vol-avg*2.2);
per_frame_101=ov = if (fsig > ov, fsig, ov*dec_f);
per_frame_102=q22 = log (1+ov) * 0.00003; 
per_frame_103=if (frame%4==0, r1 = rand(1), 0);
per_frame_104=q25 = (r1-0.5)*0.5;
per_frame_105=
per_frame_106=q23 = sin(vol);
per_frame_107=q24 = cos(vol);
per_frame_108=
per_frame_109=q12 = t1;
per_frame_110=q32 = aspecty;
per_frame_111=
per_frame_112=q14 = cos(ctime);
per_frame_113=monitor = q14;
per_frame_114=//Created 2015 by Martin
warp_1=`shader_body {
warp_2=`ret = GetPixel(uv)*0.2;
warp_3=`}
comp_1=`sampler sampler_rand00;
comp_2=`float cross, noise, z, mask, scale;
comp_3=`float2 rs, rs0, uv1, uv2, uv3, uv4, uvt;
comp_4=`float3 ret1,ret2,struc,flash2;
comp_5=`
comp_6=`float3 Get1 (float2 uvi){return GetPixel (uvi);}
comp_7=`
comp_8=`shader_body {
comp_9=`
comp_10=`float iter = 4+10*saturate (texsize.x/1024*uv.y);
comp_11=`ret = Get1(uv); ret1 = ret; ret2 = ret;
comp_12=`for (int n =1; n < 10; n++) {
comp_13=`  ret1 = max(ret1,Get1(uv+texsize.zw*float2(n,0)));
comp_14=`//  ret2 = max(ret2,Get1(uv+texsize.zw*float2(0,n)));
comp_15=`}
comp_16=`struc = ret1;
comp_17=`mask = saturate(1-16*lum(struc));
comp_18=`struc *= .06/(length(rad/2-length((ret1+ret2*0.2))+0.6));
comp_19=`
comp_20=`//BACK
comp_21=`uv4 = (uv-0.5) * (1+0*exp(-pow ((uv.x-0.5)*3-2*q14,2)))+0.5;
comp_22=`
comp_23=`
comp_24=`noise = (tex2D(sampler_noise_lq,2*uv4).r+0.25);
comp_25=`noise *= 1-tex2D(sampler_noise_lq,2*uv4+texsize.zw*-4).r;
comp_26=`noise *= (0.5+ 0.5*(lum(tex2D(sampler_rand00,uv)) > 0.5))*2;
comp_27=`ret = 0.05+noise*0.5*(1-rad);
comp_28=`
comp_29=`ret *= saturate(1-lum(GetBlur2(uv4-0.13))*8);
comp_30=`ret = lerp (ret,struc, !mask);
comp_31=`
comp_32=`//NEW FLASH
comp_33=`for (int n = 1; n <= 3; n++)
comp_34=`{
comp_35=`  uvt = tex2D(sampler_noise_lq,n*0.074+q25).xy;
comp_36=`  uv3 = uv4-uvt;
comp_37=`  uv3 = mul (uv3,float2x2 (q23,q24,-q24,q23));
comp_38=`  cross = (0.0001+abs (uv3.x+uv3.y) *abs (uv3.x-uv3.y)) * length(uv3);
comp_39=`  flash2 = (3*q22/cross) *GetBlur1(uvt) * (uvt.x < 0.9)* (uvt.x > 0.1)* (uvt.y < 0.9)* (uvt.y > 0.1);
comp_40=`  flash2 += 100000*mask*q22*saturate(1-2*length (uv3-0.1)) *noise*GetBlur1(uvt);
comp_41=`  ret += flash2;
comp_42=`}
comp_43=`//ret = GetPixel(uv);
comp_44=`//ret *= 1.4;
comp_45=`}
comp_46=`//Created 2015 by Martin
